name: ReadyAPI TestEngine Execution

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      project_name:
        description: 'ReadyAPI project to execute'
        required: true
        default: 'te-sample-readyapi-project.xml'
        type: string

env:
  TESTENGINE_URL: http://localhost:8080
  TESTENGINE_USERNAME: admin
  TESTENGINE_PASSWORD: ${{ secrets.TESTENGINE_ADMIN_PASSWORD }}

jobs:
  run-readyapi-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Start TestEngine Container
      run: |
        echo "Starting TestEngine container..."
        
        # Check if license key is available (but don't print it)
        if [ -n "${{ secrets.TESTENGINE_LICENSE_KEY }}" ]; then
          echo "✓ TestEngine license key is configured"
          LICENSE_LENGTH=$(echo "${{ secrets.TESTENGINE_LICENSE_KEY }}" | wc -c)
          echo "License key length: $LICENSE_LENGTH characters"
        else
          echo "❌ TestEngine license key is not configured"
          echo "Please add TESTENGINE_LICENSE_KEY to repository secrets"
          exit 1
        fi
        
        docker run -d \
          --name testengine \
          -p 8080:8080 \
          -e TESTENGINE_LICENSE_KEY="${{ secrets.TESTENGINE_LICENSE_KEY }}" \
          -e TESTENGINE_PASSWORD="${{ secrets.TESTENGINE_ADMIN_PASSWORD }}" \
          -e JVM_OPT_XMS="-Xms2g" \
          -e JVM_OPT_XMX="-Xmx4g" \
          --add-host host.docker.internal:host-gateway \
          smartbear/readyapi-testengine:latest
        
        echo "Container started, waiting for initialization..."
        sleep 30
        echo "Checking container logs for license issues..."
        docker logs testengine | head -100
        
        echo ""
        echo "Checking container environment variables..."
        docker exec testengine printenv | grep -i testengine || true
        
        echo ""
        echo "Testing basic container connectivity..."
        curl -v http://localhost:8080/api/v1/version || true
        
        echo "Waiting for TestEngine to be ready..."
        timeout 300s bash -c '
          attempt=0
          max_attempts=30
          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt+1))/$max_attempts: Checking TestEngine health..."
            if curl -f http://localhost:8080/api/v1/version 2>/dev/null; then
              echo "✓ TestEngine is responding!"
              exit 0
            fi
            echo "TestEngine not ready yet, waiting 10 seconds..."
            sleep 10
            attempt=$((attempt+1))
          done
          echo "❌ TestEngine failed to start after 5 minutes"
          docker logs testengine
          exit 1
        '
        echo "TestEngine is ready!"
        
    - name: Validate TestEngine connection
      run: node scripts/validate-connection.js
      
    - name: Upload ReadyAPI project to TestEngine
      id: upload
      run: |
        PROJECT_FILE="${{ github.event.inputs.project_name || 'te-sample-readyapi-project.xml' }}"
        echo "Uploading project: $PROJECT_FILE"
        EXECUTION_ID=$(node scripts/upload-project.js "$PROJECT_FILE")
        echo "execution_id=$EXECUTION_ID" >> $GITHUB_OUTPUT
        
    - name: Execute ReadyAPI project
      id: execute
      run: |
        EXECUTION_ID="${{ steps.upload.outputs.execution_id }}"
        echo "Starting execution: $EXECUTION_ID"
        node scripts/start-execution.js "$EXECUTION_ID"
        
    - name: Poll for execution completion
      id: poll
      run: |
        EXECUTION_ID="${{ steps.upload.outputs.execution_id }}"
        echo "Polling execution: $EXECUTION_ID"
        node scripts/poll-execution.js "$EXECUTION_ID"
        
    - name: Download test results
      run: |
        EXECUTION_ID="${{ steps.upload.outputs.execution_id }}"
        echo "Downloading results for: $EXECUTION_ID"
        node scripts/download-results.js "$EXECUTION_ID"
        
    - name: Commit test results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add timestamp to results directory
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        RESULTS_DIR="test-results/$TIMESTAMP"
        
        if [ -d "temp-results" ]; then
          mkdir -p "$RESULTS_DIR"
          mv temp-results/* "$RESULTS_DIR/" 2>/dev/null || true
          rmdir temp-results 2>/dev/null || true
          
          git add test-results/
          git commit -m "Add test results from execution ${{ steps.upload.outputs.execution_id }} - $TIMESTAMP" || exit 0
          git push
        else
          echo "No results to commit"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: readyapi-test-results
        path: test-results/
        retention-days: 30
        
    - name: Cleanup TestEngine Container
      if: always()
      run: |
        echo "Stopping and removing TestEngine container..."
        docker stop testengine || true
        docker rm testengine || true
        echo "TestEngine container cleaned up"