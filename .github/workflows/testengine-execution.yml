name: ReadyAPI TestEngine Execution

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      project_name:
        description: 'ReadyAPI project to execute'
        required: true
        default: 'te-sample-readyapi-project.xml'
        type: string

env:
  TESTENGINE_URL: http://localhost:8080
  TESTENGINE_USERNAME: admin
  TESTENGINE_PASSWORD: admin
  SLM_ACCESS_KEY: ${{ secrets.TESTENGINE_LICENSE_KEY }}
  TE_SLM_SERVER: ${{ secrets.TE_SLM_SERVER }}

jobs:
  run-readyapi-tests:
    runs-on: ubuntu-latest
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Start TestEngine Container
      run: |
        echo "Starting TestEngine container..."
        
        # Check if SLM access key is available (but don't print it)
        if [ -n "${{ secrets.TESTENGINE_LICENSE_KEY }}" ]; then
          echo "✓ SLM access key is configured"
          ACCESS_KEY_LENGTH=$(echo "${{ secrets.TESTENGINE_LICENSE_KEY }}" | wc -c)
          echo "SLM access key length: $ACCESS_KEY_LENGTH characters"
        else
          echo "❌ SLM access key is not configured"
          echo "Please add TESTENGINE_LICENSE_KEY to repository secrets (this is your SLM access key)"
          exit 1
        fi
        
        docker run -d \
          --name testengine \
          -p 8080:8080 \
          -e TESTENGINE_PASSWORD=admin \
          -e JVM_OPT_XMS="-Xms2g" \
          -e JVM_OPT_XMX="-Xmx4g" \
          --add-host host.docker.internal:host-gateway \
          smartbear/readyapi-testengine:latest
        
        echo "Container started, waiting for initialization..."
        sleep 30
        echo "Checking container logs for license issues..."
        docker logs testengine | head -100
        
        echo ""
        echo "Checking container environment variables..."
        docker exec testengine printenv | grep -i testengine || true
        
        echo ""
        echo "Checking if admin user was created correctly..."
        docker logs testengine | grep -i "admin\|password\|user" || echo "No admin/password messages found"
        
        echo ""
        echo "Testing basic container connectivity..."
        curl -v http://localhost:8080/api/v1/version || true
        
        echo "Waiting for TestEngine to be fully healthy (matching Docker healthcheck)..."
        timeout 300s bash -c '
          attempt=0
          max_attempts=30
          consecutive_success=0
          required_consecutive=3
          
          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt+1))/$max_attempts: Checking TestEngine health..."
            
            # Use the same healthcheck as Docker Compose
            if wget -qO- http://localhost:8080/api/v1/version 2>/dev/null || curl -fsS http://localhost:8080/api/v1/version 2>/dev/null; then
              consecutive_success=$((consecutive_success + 1))
              echo "✓ Health check passed ($consecutive_success/$required_consecutive consecutive successes)"
              
              if [ $consecutive_success -ge $required_consecutive ]; then
                echo "✓ TestEngine is consistently healthy!"
                exit 0
              fi
            else
              consecutive_success=0
              echo "Health check failed, resetting consecutive count"
            fi
            
            echo "Waiting 10 seconds before next health check..."
            sleep 10
            attempt=$((attempt+1))
          done
          
          echo "❌ TestEngine failed to become consistently healthy after 5 minutes"
          docker logs testengine
          exit 1
        '
        echo "TestEngine is consistently healthy!"
        
        # Final check of license status (similar to Docker Compose te-license service)
        echo "Checking current license status before activation..."
        curl -u admin:admin -H "Accept: application/json" http://localhost:8080/api/v1/license || echo "No license found - will activate in next step"
        
    - name: Validate TestEngine connection
      run: node scripts/validate-connection.js
      
    - name: Activate TestEngine license
      run: node scripts/activate-license.js
      
    - name: Upload ReadyAPI project to TestEngine
      id: upload
      run: |
        PROJECT_FILE="${{ github.event.inputs.project_name || 'te-sample-readyapi-project.xml' }}"
        echo "Uploading project: $PROJECT_FILE"
        
        # Capture output and get the last line (execution ID)
        OUTPUT=$(node scripts/upload-project.js "$PROJECT_FILE")
        EXECUTION_ID=$(echo "$OUTPUT" | tail -n 1)
        
        echo "Captured execution ID: $EXECUTION_ID"
        echo "execution_id=$EXECUTION_ID" >> $GITHUB_OUTPUT
        echo "✓ Job submitted and started automatically (no separate start call needed)"
        
    - name: Poll for execution completion
      id: poll
      run: |
        EXECUTION_ID="${{ steps.upload.outputs.execution_id }}"
        echo "Polling execution: $EXECUTION_ID"
        node scripts/poll-execution.js "$EXECUTION_ID"
        
    - name: Download test results
      run: |
        EXECUTION_ID="${{ steps.upload.outputs.execution_id }}"
        echo "Downloading results for: $EXECUTION_ID"
        node scripts/download-results.js "$EXECUTION_ID"
        
    - name: Prepare test results for artifacts
      run: |
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        EXECUTION_ID="${{ steps.upload.outputs.execution_id }}"
        
        if [ -d "temp-results" ]; then
          echo "✓ Test results found in temp-results/"
          ls -la temp-results/
          echo "execution_timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "✓ Results prepared for artifact upload"
        else
          echo "⚠️ No results directory found"
        fi
      id: prepare
        
    - name: Upload test results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: readyapi-test-results-${{ steps.prepare.outputs.execution_timestamp || github.run_number }}
        path: temp-results/
        retention-days: 30
        
    - name: Cleanup TestEngine Container
      if: always()
      run: |
        echo "Stopping and removing TestEngine container..."
        docker stop testengine || true
        docker rm testengine || true
        echo "TestEngine container cleaned up"